{"version":3,"sources":["webpack:///./src/views/message/message.vue","webpack:///message.vue","webpack:///./src/views/message/message.vue?5b13","webpack:///./src/views/message/message.vue?7153"],"names":[],"mappings":";;;;;;AACA;AACA,uBAA0Q;;AAE1Q;AACA;AACA;AACA;AACA,yBAAsG;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iDAAiD,IAAI;AACpI,mCAAmC;;AAEnC;AACA,YAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;UAEA;;AACA;;8DACA;;;0BAIA;AAFA;;4CAIA;kGACA;AAEA;AAJA;AAJA,eASA;AACA;4DACA;;;0BAGA;0BAEA;AAHA;;4CAKA;kGACA;AAEA;AAJA;AALA,eAUA;AACA;wDACA;;;0BAIA;AAFA;;4CAIA;kGACA;AAEA;AAJA;AAJA,eASA;AACA;;4BAEA;2BACA;4BACA;4BACA;gCACA;8BACA;yBACA;0BACA;6BACA;wBACA;;uBAEA;sBACA;yBAEA;AAJA;;AAMA;AACA;AACA;AACA;AACA;AACA;uBACA;qBACA;uBACA;0BACA;mDACA;;;oDAGA;yDACA;6DACA;6EACA;wDACA;AAEA;AAPA;AADA,kCASA;AAEA;aAvBA;uBAyBA;qBACA;uBACA;uBACA;mDACA;;;kCAIA;kCAEA;AAHA;;oCAOA;AAHA;AALA,sBADA;;kCAYA;kCAEA;AAHA;AADA,mDAMA;AAEA;AAxBA;uBA0BA;qBACA;uBACA;uBACA;mDACA;+DACA;wCACA,kBAEA;uEACA;wCACA,iBAEA;2BACA;wCACA,eAEA;AACA;AAIA;AAtBA;AAjEA;AAwFA;;;8CAEA;gCACA;4BACA;0CACA;2BACA;4BACA;8BACA;8BACA;uFACA;AACA;sDACA;oCACA;AACA;4DACA;kDACA;wCACA;AACA;sCACA;mCACA;kCACA;2CACA;2CACA;kCACA;2CACA;mBACA;kCACA;2CACA;AACA;AACA;+CACA;AACA;6BACA;8CACA;;gFACA;;sFACA;;oFACA;;8DACA;;4DAEA;;+BACA;AAEA;AA1CA;gCA2CA;;mBAGA;kBAEA;AAHA,SADA;mBAMA;kBAEA;AAHA;mBAKA;kBAGA;AAJA;;mBAOA;kBAGA;AAJA,SADA;;mBAQA;kBAGA;AAJA,SADA;8CAMA;gDACA;mDACA;AACA;;;mDAEA;mCACA;AACA;qDACA;oCACA;AACA;qDACA;uCACA;AAEA;AAVA;AA3MA,G;;;;;;;ACzCA,yC;;;;;;;ACAA,gBAAgB,mBAAmB,aAAa,0BAA0B;AAC1E;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"10.chunk.js","sourcesContent":["\n/* styles */\nrequire(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?minimize!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"id\\\":\\\"data-v-d8ce84dc\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!autoprefixer-loader!less-loader!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!../../../node_modules/iview-loader/index.js??ref--0-1!./message.vue\")\n\nvar Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!../../../node_modules/iview-loader/index.js??ref--0-1!./message.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-d8ce84dc\\\"}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!../../../node_modules/iview-loader/index.js??ref--0-1!./message.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"C:\\\\Work\\\\iView-ZOAM\\\\src\\\\views\\\\message\\\\message.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] message.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-loader/node_modules/vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-d8ce84dc\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-d8ce84dc\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/message/message.vue\n// module id = 547\n// module chunks = 10","<style lang=\"less\">\r\n    @import './message.less';\r\n</style>\r\n\r\n<template>\r\n    <div class=\"message-main-con\">\r\n        <div class=\"message-mainlist-con\">\r\n            <div>\r\n                <Button @click=\"setCurrentMesType('unread')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'unread'\" type=\"checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">未读消息</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"unreadCount\"></Badge></Button>\r\n            </div>\r\n            <div>\r\n                <Button @click=\"setCurrentMesType('hasread')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'hasread'\" type=\"checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">已读消息</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"hasreadCount\"></Badge></Button>\r\n            </div>\r\n            <div>\r\n                <Button @click=\"setCurrentMesType('recyclebin')\" size=\"large\" long type=\"text\"><transition name=\"mes-current-type-btn\"><Icon v-show=\"currentMessageType === 'recyclebin'\" type=\"checkmark\"></Icon></transition><span class=\"mes-type-btn-text\">回收站</span><Badge class=\"message-count-badge-outer\" class-name=\"message-count-badge\" :count=\"recyclebinCount\"></Badge></Button>\r\n            </div>\r\n        </div>\r\n        <div class=\"message-content-con\">\r\n            <transition name=\"view-message\">\r\n                <div v-if=\"showMesTitleList\" class=\"message-title-list-con\">\r\n                    <Table ref=\"messageList\" :columns=\"mesTitleColumns\" :data=\"currentMesList\" :no-data-text=\"noDataText\"></Table>\r\n                </div>\r\n            </transition>\r\n            <transition name=\"back-message-list\">\r\n                <div v-if=\"!showMesTitleList\" class=\"message-view-content-con\">\r\n                    <div class=\"message-content-top-bar\">\r\n                        <span class=\"mes-back-btn-con\"><Button type=\"text\" @click=\"backMesTitleList\"><Icon type=\"chevron-left\"></Icon>&nbsp;&nbsp;返回</Button></span>\r\n                        <h3 class=\"mes-title\">{{ mes.title }}</h3>\r\n                    </div>\r\n                    <p class=\"mes-time-con\"><Icon type=\"android-time\"></Icon>&nbsp;&nbsp;{{ mes.time }}</p>\r\n                    <div class=\"message-content-body\">\r\n                        <p class=\"message-content\">{{ mes.content }}</p>\r\n                    </div>\r\n                </div>\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'message',\r\n        data () {\r\n            const markAsreadBtn = (h, params) => {\r\n                return h('Button', {\r\n                    props: {\r\n                        size: 'small'\r\n                    },\r\n                    on: {\r\n                        click: () => {\r\n                            this.hasreadMesList.unshift(this.currentMesList.splice(params.index, 1)[0]);\r\n                        }\r\n                    }\r\n                }, '标为已读');\r\n            };\r\n            const deleteMesBtn = (h, params) => {\r\n                return h('Button', {\r\n                    props: {\r\n                        size: 'small',\r\n                        type: 'error'\r\n                    },\r\n                    on: {\r\n                        click: () => {\r\n                            this.recyclebinList.unshift(this.hasreadMesList.splice(params.index, 1)[0]);\r\n                        }\r\n                    }\r\n                }, '删除');\r\n            };\r\n            const restoreBtn = (h, params) => {\r\n                return h('Button', {\r\n                    props: {\r\n                        size: 'small'\r\n                    },\r\n                    on: {\r\n                        click: () => {\r\n                            this.hasreadMesList.unshift(this.recyclebinList.splice(params.index, 1)[0]);\r\n                        }\r\n                    }\r\n                }, '还原');\r\n            };\r\n            return {\r\n                currentMesList: [],\r\n                unreadMesList: [],\r\n                hasreadMesList: [],\r\n                recyclebinList: [],\r\n                currentMessageType: 'unread',\r\n                showMesTitleList: true,\r\n                unreadCount: 0,\r\n                hasreadCount: 0,\r\n                recyclebinCount: 0,\r\n                noDataText: '暂无未读消息',\r\n                mes: {\r\n                    title: '',\r\n                    time: '',\r\n                    content: ''\r\n                },\r\n                mesTitleColumns: [\r\n                    // {\r\n                    //     type: 'selection',\r\n                    //     width: 50,\r\n                    //     align: 'center'\r\n                    // },\r\n                    {\r\n                        title: ' ',\r\n                        key: 'title',\r\n                        align: 'left',\r\n                        ellipsis: true,\r\n                        render: (h, params) => {\r\n                            return h('a', {\r\n                                on: {\r\n                                    click: () => {\r\n                                        this.showMesTitleList = false;\r\n                                        this.mes.title = params.row.title;\r\n                                        this.mes.time = this.formatDate(params.row.time);\r\n                                        this.getContent(params.index);\r\n                                    }\r\n                                }\r\n                            }, params.row.title);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: ' ',\r\n                        key: 'time',\r\n                        align: 'center',\r\n                        width: 180,\r\n                        render: (h, params) => {\r\n                            return h('span', [\r\n                                h('Icon', {\r\n                                    props: {\r\n                                        type: 'android-time',\r\n                                        size: 12\r\n                                    },\r\n                                    style: {\r\n                                        margin: '0 5px'\r\n                                    }\r\n                                }),\r\n                                h('span', {\r\n                                    props: {\r\n                                        type: 'android-time',\r\n                                        size: 12\r\n                                    }\r\n                                }, this.formatDate(params.row.time))\r\n                            ]);\r\n                        }\r\n                    },\r\n                    {\r\n                        title: ' ',\r\n                        key: 'asread',\r\n                        align: 'center',\r\n                        width: 100,\r\n                        render: (h, params) => {\r\n                            if (this.currentMessageType === 'unread') {\r\n                                return h('div', [\r\n                                    markAsreadBtn(h, params)\r\n                                ]);\r\n                            } else if (this.currentMessageType === 'hasread') {\r\n                                return h('div', [\r\n                                    deleteMesBtn(h, params)\r\n                                ]);\r\n                            } else {\r\n                                return h('div', [\r\n                                    restoreBtn(h, params)\r\n                                ]);\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n        },\r\n        methods: {\r\n            formatDate (time) {\r\n                let date = new Date(time);\r\n                let year = date.getFullYear();\r\n                let month = date.getMonth() + 1;\r\n                let day = date.getDate();\r\n                let hour = date.getHours();\r\n                let minute = date.getMinutes();\r\n                let second = date.getSeconds();\r\n                return year + '/' + month + '/' + day + '  ' + hour + ':' + minute + ':' + second;\r\n            },\r\n            backMesTitleList () {\r\n                this.showMesTitleList = true;\r\n            },\r\n            setCurrentMesType (type) {\r\n                if (this.currentMessageType !== type) {\r\n                    this.showMesTitleList = true;\r\n                }\r\n                this.currentMessageType = type;\r\n                if (type === 'unread') {\r\n                    this.noDataText = '暂无未读消息';\r\n                    this.currentMesList = this.unreadMesList;\r\n                } else if (type === 'hasread') {\r\n                    this.noDataText = '暂无已读消息';\r\n                    this.currentMesList = this.hasreadMesList;\r\n                } else {\r\n                    this.noDataText = '回收站无消息';\r\n                    this.currentMesList = this.recyclebinList;\r\n                }\r\n            },\r\n            getContent (index) {\r\n                // you can write ajax request here to get message content\r\n                let mesContent = '';\r\n                switch (this.currentMessageType + index) {\r\n                    case 'unread0': mesContent = '这是您点击的《欢迎登录iView-admin后台管理系统，来了解他的用途吧》的相关内容。'; break;\r\n                    case 'unread1': mesContent = '这是您点击的《使用iView-admin和iView-ui组件库快速搭建你的后台系统吧》的相关内容。'; break;\r\n                    case 'unread2': mesContent = '这是您点击的《喜欢iView-admin的话，欢迎到github主页给个star吧》的相关内容。'; break;\r\n                    case 'hasread0': mesContent = '这是您点击的《这是一条您已经读过的消息》的相关内容。'; break;\r\n                    default: mesContent = '这是您点击的《这是一条被删除的消息》的相关内容。'; break;\r\n                }\r\n                this.mes.content = mesContent;\r\n            }\r\n        },\r\n        mounted () {\r\n            this.currentMesList = this.unreadMesList = [\r\n                {\r\n                    title: '欢迎登录iView-admin后台管理系统，来了解他的用途吧',\r\n                    time: 1507390106000\r\n                },\r\n                {\r\n                    title: '使用iView-admin和iView-ui组件库快速搭建你的后台系统吧',\r\n                    time: 1507390106000\r\n                },\r\n                {\r\n                    title: '喜欢iView-admin的话，欢迎到github主页给个star吧',\r\n                    time: 1507390106000\r\n                }\r\n            ];\r\n            this.hasreadMesList = [\r\n                {\r\n                    title: '这是一条您已经读过的消息',\r\n                    time: 1507330106000\r\n                }\r\n            ];\r\n            this.recyclebinList = [\r\n                {\r\n                    title: '这是一条被删除的消息',\r\n                    time: 1506390106000\r\n                }\r\n            ];\r\n            this.unreadCount = this.unreadMesList.length;\r\n            this.hasreadCount = this.hasreadMesList.length;\r\n            this.recyclebinCount = this.recyclebinList.length;\r\n        },\r\n        watch: {\r\n            unreadMesList (arr) {\r\n                this.unreadCount = arr.length;\r\n            },\r\n            hasreadMesList (arr) {\r\n                this.hasreadCount = arr.length;\r\n            },\r\n            recyclebinList (arr) {\r\n                this.recyclebinCount = arr.length;\r\n            }\r\n        }\r\n    };\r\n</script>\n\n\n// WEBPACK FOOTER //\n// message.vue?21f43f8a","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?minimize!./~/vue-loader/lib/style-compiler?{\"id\":\"data-v-d8ce84dc\",\"scoped\":false,\"hasInlineConfig\":false}!./~/autoprefixer-loader!./~/less-loader!./~/vue-loader/lib/selector.js?type=styles&index=0!./~/iview-loader?{\"prefix\":true}!./src/views/message/message.vue\n// module id = 620\n// module chunks = 10","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"message-main-con\"\n  }, [_c('div', {\n    staticClass: \"message-mainlist-con\"\n  }, [_c('div', [_c('Button', {\n    attrs: {\n      \"size\": \"large\",\n      \"long\": \"\",\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setCurrentMesType('unread')\n      }\n    }\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"mes-current-type-btn\"\n    }\n  }, [_c('Icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.currentMessageType === 'unread'),\n      expression: \"currentMessageType === 'unread'\"\n    }],\n    attrs: {\n      \"type\": \"checkmark\"\n    }\n  })], 1), _c('span', {\n    staticClass: \"mes-type-btn-text\"\n  }, [_vm._v(\"未读消息\")]), _c('Badge', {\n    staticClass: \"message-count-badge-outer\",\n    attrs: {\n      \"class-name\": \"message-count-badge\",\n      \"count\": _vm.unreadCount\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('div', [_c('Button', {\n    attrs: {\n      \"size\": \"large\",\n      \"long\": \"\",\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setCurrentMesType('hasread')\n      }\n    }\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"mes-current-type-btn\"\n    }\n  }, [_c('Icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.currentMessageType === 'hasread'),\n      expression: \"currentMessageType === 'hasread'\"\n    }],\n    attrs: {\n      \"type\": \"checkmark\"\n    }\n  })], 1), _c('span', {\n    staticClass: \"mes-type-btn-text\"\n  }, [_vm._v(\"已读消息\")]), _c('Badge', {\n    staticClass: \"message-count-badge-outer\",\n    attrs: {\n      \"class-name\": \"message-count-badge\",\n      \"count\": _vm.hasreadCount\n    }\n  })], 1)], 1), _vm._v(\" \"), _c('div', [_c('Button', {\n    attrs: {\n      \"size\": \"large\",\n      \"long\": \"\",\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.setCurrentMesType('recyclebin')\n      }\n    }\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"mes-current-type-btn\"\n    }\n  }, [_c('Icon', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.currentMessageType === 'recyclebin'),\n      expression: \"currentMessageType === 'recyclebin'\"\n    }],\n    attrs: {\n      \"type\": \"checkmark\"\n    }\n  })], 1), _c('span', {\n    staticClass: \"mes-type-btn-text\"\n  }, [_vm._v(\"回收站\")]), _c('Badge', {\n    staticClass: \"message-count-badge-outer\",\n    attrs: {\n      \"class-name\": \"message-count-badge\",\n      \"count\": _vm.recyclebinCount\n    }\n  })], 1)], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"message-content-con\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"view-message\"\n    }\n  }, [(_vm.showMesTitleList) ? _c('div', {\n    staticClass: \"message-title-list-con\"\n  }, [_c('Table', {\n    ref: \"messageList\",\n    attrs: {\n      \"columns\": _vm.mesTitleColumns,\n      \"data\": _vm.currentMesList,\n      \"no-data-text\": _vm.noDataText\n    }\n  })], 1) : _vm._e()]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"back-message-list\"\n    }\n  }, [(!_vm.showMesTitleList) ? _c('div', {\n    staticClass: \"message-view-content-con\"\n  }, [_c('div', {\n    staticClass: \"message-content-top-bar\"\n  }, [_c('span', {\n    staticClass: \"mes-back-btn-con\"\n  }, [_c('Button', {\n    attrs: {\n      \"type\": \"text\"\n    },\n    on: {\n      \"click\": _vm.backMesTitleList\n    }\n  }, [_c('Icon', {\n    attrs: {\n      \"type\": \"chevron-left\"\n    }\n  }), _vm._v(\"  返回\")], 1)], 1), _vm._v(\" \"), _c('h3', {\n    staticClass: \"mes-title\"\n  }, [_vm._v(_vm._s(_vm.mes.title))])]), _vm._v(\" \"), _c('p', {\n    staticClass: \"mes-time-con\"\n  }, [_c('Icon', {\n    attrs: {\n      \"type\": \"android-time\"\n    }\n  }), _vm._v(\"  \" + _vm._s(_vm.mes.time))], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"message-content-body\"\n  }, [_c('p', {\n    staticClass: \"message-content\"\n  }, [_vm._v(_vm._s(_vm.mes.content))])])]) : _vm._e()])], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-loader/node_modules/vue-hot-reload-api\").rerender(\"data-v-d8ce84dc\", module.exports)\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-d8ce84dc\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./~/iview-loader?{\"prefix\":true}!./src/views/message/message.vue\n// module id = 639\n// module chunks = 10"],"sourceRoot":""}